// ssi-operation-base.js - Fixed for Caliper Contract Loading
'use strict';

const { WorkloadModuleBase } = require('@hyperledger/caliper-core');

const SUPPORTED_CONNECTOR = 'ethereum';

// SSI Contract names - MUST match network configuration exactly
const SSI_CONTRACTS = {
  ROLE_CONTROL: 'RoleControl',
  DID_REGISTRY: 'DidRegistry',
  CREDENTIAL_REGISTRY: 'CredentialRegistry'
};

// SSI Operation types
const SSI_OPERATIONS = {
  // Role operations
  ASSIGN_ROLE: 'assignRole',
  REVOKE_ROLE: 'revokeRole',
  GET_ROLE: 'getRole',
  HAS_ROLE: 'hasRole',

  // DID operations  
  CREATE_DID: 'createDid',
  UPDATE_DID: 'updateDid',
  DEACTIVATE_DID: 'deactivateDid',
  RESOLVE_DID: 'resolveDid',
  VALIDATE_DID: 'validateDid',

  // Credential operations
  ISSUE_CREDENTIAL: 'issueCredential',
  UPDATE_CREDENTIAL_STATUS: 'updateCredentialStatus',
  RESOLVE_CREDENTIAL: 'resolveCredential'
};

// Read-only operations (don't require gas/transaction)
const READ_ONLY_OPERATIONS = new Set([
  SSI_OPERATIONS.GET_ROLE,
  SSI_OPERATIONS.HAS_ROLE,
  SSI_OPERATIONS.RESOLVE_DID,
  SSI_OPERATIONS.VALIDATE_DID,
  SSI_OPERATIONS.RESOLVE_CREDENTIAL
]);

/**
 * Base class for SSI operations - Caliper Compatible Implementation
 * Fixes contract loading issues by properly interfacing with Caliper's connector
 */
class SSIOperationBase extends WorkloadModuleBase {
  /**
   * Initializes the SSI workload module with proper Caliper integration.
   */
  async initializeWorkloadModule(workerIndex, totalWorkers, roundIndex, roundArguments, sutAdapter, sutContext) {
    await super.initializeWorkloadModule(workerIndex, totalWorkers, roundIndex, roundArguments, sutAdapter, sutContext);

    // Validate connector type
    this.assertConnectorType();

    // Validate SSI-specific settings
    this.assertSSISettings();

    // Initialize SSI configuration
    this.initializeSSIConfiguration();

    // Setup account management
    this.setupAccountManagement();

    // CRITICAL: Validate contract availability in sutAdapter
    this.validateContractAvailability();

    // Initialize SSI state manager
    this.ssiState = this.createSSIState();

    console.log(`üîó SSI Worker ${this.workerIndex} initialized with account: ${this.fromAddress}`);
  }

  /**
   * Override to provide an SSI State Manager instance.
   * @protected
   */
  createSSIState() {
    throw new Error('SSI workload error: "createSSIState" must be overridden in derived classes');
  }

  /**
   * Ensures the connector type is supported (Ethereum only).
   * @protected
   */
  assertConnectorType() {
    this.connectorType = this.sutAdapter.getType();
    if (this.connectorType !== SUPPORTED_CONNECTOR) {
      throw new Error(`SSI workload error: Connector type ${this.connectorType} is not supported; expected: ${SUPPORTED_CONNECTOR}`);
    }
  }

  /**
   * Validates SSI-specific configuration settings.
   * @protected
   */
  assertSSISettings() {
    const requiredSettings = ['gasLimit', 'chainId'];

    requiredSettings.forEach(setting => {
      if (!this.roundArguments.hasOwnProperty(setting)) {
        throw new Error(`SSI workload error: required setting "${setting}" is missing from the benchmark configuration`);
      }
    });

    console.log(`üîß SSI Config validated for ${this.totalWorkers} workers`);
  }

  /**
   * Initializes SSI-specific configuration.
   * @protected
   */
  initializeSSIConfiguration() {
    // Store SSI configuration
    this.ssiConfig = {
      gasLimit: this.roundArguments.gasLimit || 12000000,
      chainId: this.roundArguments.chainId || 1337,
      web3signerUrl: this.roundArguments.web3signerUrl,
      besuEndpoint: this.roundArguments.besuEndpoint,
      blockTime: this.roundArguments.blockTime || 3,
      contractAddresses: this.roundArguments.contractAddresses || {},
      gasConfig: this.roundArguments.gasConfig || {}
    };

    console.log(`‚öôÔ∏è  SSI Configuration loaded for ${this.totalWorkers} workers`);
  }

  /**
   * Sets up account management for the worker.
   * @protected
   */
  setupAccountManagement() {
    // Initialize nonce tracker
    this.nonceTracker = {};

    // Try to use sutAdapter accounts first (if available)
    if (this.sutAdapter.accounts && this.sutAdapter.accounts.length > 0) {
      const availableAccounts = this.sutAdapter.accounts.length;

      if (this.totalWorkers > availableAccounts) {
        console.warn(`‚ö†Ô∏è  SSI Warning: ${this.totalWorkers} workers with only ${availableAccounts} accounts - workers will share accounts`);
      }

      // Use consistent account selection based on worker index to avoid nonce conflicts
      this.clientIdx = this.workerIndex % availableAccounts;
      this.fromAddress = this.sutAdapter.accounts[this.clientIdx].address;
      this.fromAddressPrivateKey = this.sutAdapter.accounts[this.clientIdx].privateKey;

      console.log(`üë§ Worker ${this.workerIndex} using sutAdapter account ${this.clientIdx}: ${this.fromAddress}`);
    } else {
      // Fallback to network configuration accounts (like SimpleContract example)
      console.log(`üë§ Worker ${this.workerIndex} couldn't find accounts in sutAdapter, using network configuration`);

      // Try to get accounts from network configuration
      const networkAccounts = this.getNetworkAccounts();

      if (networkAccounts && networkAccounts.length > 0) {
        const availableAccounts = networkAccounts.length;

        if (this.totalWorkers > availableAccounts) {
          console.warn(`‚ö†Ô∏è  SSI Warning: ${this.totalWorkers} workers with only ${availableAccounts} network accounts - workers will share accounts`);
        }

        this.clientIdx = this.workerIndex % availableAccounts;
        this.fromAddress = networkAccounts[this.clientIdx].address;
        this.fromAddressPrivateKey = networkAccounts[this.clientIdx].privateKey;

        console.log(`üë§ Worker ${this.workerIndex} using network config account ${this.clientIdx}: ${this.fromAddress}`);
      } else {
        // Final fallback to connector default settings
        console.log(`üë§ Worker ${this.workerIndex} using connector default account settings`);

        // Use connector's default account (if available)
        this.fromAddress = this.sutAdapter.bcType?.fromAddress || this.sutAdapter.getDefaultAccount?.() || null;
        this.fromAddressPrivateKey = this.sutAdapter.bcType?.fromAddressPrivateKey || null;

        if (!this.fromAddress) {
          throw new Error('SSI workload error: No accounts available from sutAdapter, network config, or connector defaults. Please check your network configuration.');
        }

        console.log(`üë§ Worker ${this.workerIndex} using default account: ${this.fromAddress}`);
      }
    }

    // Initialize nonce tracker for this account
    if (this.fromAddress) {
      this.nonceTracker[this.fromAddress] = 0;
    }
  }

  /**
   * Attempts to get accounts from network configuration.
   * @returns {Array|null} Array of account objects or null if not found
   * @protected
   */
  getNetworkAccounts() {
    try {
      // Try to access network config through sutAdapter
      if (this.sutAdapter.context?.networkConfiguration?.ethereum?.accounts) {
        return this.sutAdapter.context.networkConfiguration.ethereum.accounts;
      }

      // Try alternative access paths
      if (this.sutAdapter.networkConfiguration?.ethereum?.accounts) {
        return this.sutAdapter.networkConfiguration.ethereum.accounts;
      }

      // Try sutAdapter properties that might contain account info
      if (this.sutAdapter.ethereumConfig?.accounts) {
        return this.sutAdapter.ethereumConfig.accounts;
      }

      return null;
    } catch (error) {
      console.warn(`‚ö†Ô∏è  Could not access network accounts: ${error.message}`);
      return null;
    }
  }

  /**
   * CRITICAL: Validates that required contracts are available in sutAdapter
   * This is where the ABI loading issue typically occurs
   * @protected
   */
  validateContractAvailability() {
    console.log(`üîç Validating SSI contract availability in sutAdapter...`);

    // Ensure sutAdapter context exists with contracts
    if (!this.sutAdapter.ethereumConfig?.contracts) {
      throw new Error('SSI workload error: sutAdapter.ethereumConfig.contracts is missing. Caliper connector initialization failed.');
    }

    const availableContracts = Object.keys(this.sutAdapter.ethereumConfig.contracts);
    console.log(`üìã Available contracts: ${availableContracts.join(', ')}`);

    // Validate each SSI contract exists and is accessible
    const requiredSSIContracts = Object.values(SSI_CONTRACTS);
    const validatedContracts = {};

    for (const contractName of requiredSSIContracts) {
      console.log(`üîç Validating ${contractName}...`);

      const contract = this.sutAdapter.ethereumConfig.contracts[contractName];

      // Check contract exists
      if (!contract) {
        throw new Error(`SSI workload error: ${contractName} contract not found in sutAdapter. Check network configuration.`);
      }

      // SSI-specific validation: ensure contract is an object we can work with
      if (typeof contract !== 'object') {
        throw new Error(`SSI workload error: ${contractName} is not a valid contract object. Got: ${typeof contract}`);
      }

      // For SSI operations, we need to ensure the contract can handle Caliper requests
      // This is more practical than checking internal structure
      try {
        // Test if we can access basic contract properties without errors
        const contractInfo = {
          hasAddress: contract.address !== undefined,
          hasOptions: contract.options !== undefined,
          isCallable: typeof contract === 'object',
          contractName: contractName
        };

        console.log(`   üìä ${contractName} info:`, contractInfo);

        // Store validated contract for later use
        validatedContracts[contractName] = contract;
        console.log(`   ‚úÖ ${contractName} validated for SSI operations`);

      } catch (error) {
        throw new Error(`SSI workload error: ${contractName} contract validation failed: ${error.message}`);
      }
    }

    // Store validated contracts for SSI operations
    this.validatedSSIContracts = validatedContracts;

    console.log(`üéØ SSI contract validation completed successfully`);
    console.log(`üöÄ Ready for SSI operations: ${Object.keys(validatedContracts).join(', ')}`);
  }

  /**
   * Get a validated SSI contract by name.
   * @param {string} contractName - The SSI contract name
   * @returns {Object} The validated contract instance
   * @protected
   */
  getValidatedSSIContract(contractName) {
    if (!this.validatedSSIContracts) {
      throw new Error('SSI workload error: Contracts not yet validated. Call validateContractAvailability first.');
    }

    const contract = this.validatedSSIContracts[contractName];
    if (!contract) {
      throw new Error(`SSI workload error: ${contractName} not found in validated contracts. Available: ${Object.keys(this.validatedSSIContracts).join(', ')}`);
    }

    return contract;
  }

  /**
   * Creates a Caliper-compatible request for SSI operations.
   * This uses the same pattern as OperationBase but for SSI contracts.
   * @param {string} contractName - The SSI contract name (must match network config)
   * @param {string} operation - The contract function to call
   * @param {Object} args - The arguments for the function call
   * @param {Object} options - Additional options for the request
   * @returns {Object} The connector request configuration
   * @protected
   */
  createSSIRequest(contractName, operation, args, options = {}) {
    // Validate contract and operation
    this.validateSSIOperation(contractName, operation);

    const isReadOnly = READ_ONLY_OPERATIONS.has(operation);

    // Create request in the same format as OperationBase
    const request = {
      contract: contractName,    // This MUST match the contract name in network config
      verb: operation,           // This MUST match the function name in the contract ABI
      args: Object.values(args), // Convert args object to array
      readOnly: isReadOnly,
      ...options
    };

    // Add transaction-specific fields for write operations (similar to OperationBase)
    if (!isReadOnly) {
      Object.assign(request, {
        fromAddress: this.fromAddress,
        fromAddressPrivateKey: this.fromAddressPrivateKey,
        gas: {
          price: 0, // Use network default for private network
          limit: this.getGasLimitFromConfig(contractName, operation)
        },
        useRawTransaction: true
      });
    }

    return request;
  }

  /**
   * Validates SSI contract and operation combination.
   * @param {string} contractName - The contract name
   * @param {string} operation - The operation name
   * @protected
   */
  validateSSIOperation(contractName, operation) {
    if (!Object.values(SSI_CONTRACTS).includes(contractName)) {
      throw new Error(`SSI workload error: Unknown contract "${contractName}". Expected one of: ${Object.values(SSI_CONTRACTS).join(', ')}`);
    }

    if (!Object.values(SSI_OPERATIONS).includes(operation)) {
      throw new Error(`SSI workload error: Unknown operation "${operation}". Expected one of: ${Object.values(SSI_OPERATIONS).join(', ')}`);
    }

    // Validate that the contract actually has this method
    if (this.sutAdapter.ethereumConfig && this.sutAdapter.ethereumConfig.contracts) {
      const contract = this.sutAdapter.ethereumConfig.contracts[contractName];
      if (contract && contract.methods && !contract.methods[operation]) {
        throw new Error(`SSI workload error: Contract ${contractName} does not have method ${operation}. Check ABI.`);
      }
    }
  }

  /**
   * Gets gas limit from configuration with fallback defaults.
   * @param {string} contractName - The contract name
   * @param {string} operation - The operation name
   * @returns {number} Gas limit
   * @protected
   */
  getGasLimitFromConfig(contractName, operation) {
    // Try to get from custom gas config first
    if (this.ssiConfig.gasConfig &&
      this.ssiConfig.gasConfig[contractName] &&
      this.ssiConfig.gasConfig[contractName][operation]) {
      return this.ssiConfig.gasConfig[contractName][operation];
    }

    // Fallback to network config gas settings
    try {
      const networkGas = this.sutAdapter.context.contracts[contractName].gas;
      if (networkGas && networkGas[operation]) {
        return networkGas[operation];
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è  Could not get gas config for ${contractName}.${operation}: ${error.message}`);
    }

    // Final fallback to reasonable defaults
    const defaultGasLimits = {
      [SSI_OPERATIONS.ASSIGN_ROLE]: 200000,
      [SSI_OPERATIONS.REVOKE_ROLE]: 80000,
      [SSI_OPERATIONS.CREATE_DID]: 165000,
      [SSI_OPERATIONS.UPDATE_DID]: 65000,
      [SSI_OPERATIONS.DEACTIVATE_DID]: 50000,
      [SSI_OPERATIONS.ISSUE_CREDENTIAL]: 150000,
      [SSI_OPERATIONS.UPDATE_CREDENTIAL_STATUS]: 75000,
      // Read operations
      [SSI_OPERATIONS.GET_ROLE]: 50000,
      [SSI_OPERATIONS.HAS_ROLE]: 50000,
      [SSI_OPERATIONS.RESOLVE_DID]: 50000,
      [SSI_OPERATIONS.VALIDATE_DID]: 50000,
      [SSI_OPERATIONS.RESOLVE_CREDENTIAL]: 50000
    };

    const gasLimit = defaultGasLimits[operation] || 200000;
    console.warn(`‚ö†Ô∏è  Using default gas limit ${gasLimit} for ${contractName}.${operation}`);
    return gasLimit;
  }

  /**
   * Logs SSI operation execution.
   * @param {string} contractName - The contract name
   * @param {string} operation - The operation name
   * @param {Object} args - The operation arguments
   * @param {string} status - Execution status ('success' | 'error')
   * @param {number} executionTime - Execution time in milliseconds
   * @protected
   */
  logSSIOperation(contractName, operation, args, status = 'success', executionTime = 0) {
    const logPrefix = status === 'success' ? '‚úÖ' : '‚ùå';
    const gasUsed = this.getGasLimitFromConfig(contractName, operation);

    console.log(`${logPrefix} SSI ${contractName}.${operation}:`);
    console.log(`   üìÑ Args: ${JSON.stringify(args)}`);
    console.log(`   ‚õΩ Gas: ${gasUsed}`);
    console.log(`   ‚è±Ô∏è  Time: ${executionTime}ms`);
    console.log(`   üë§ Worker: ${this.workerIndex}`);
  }

  /**
   * Executes an SSI operation using Caliper's standard pattern.
   * @param {string} contractName - The contract name
   * @param {string} operation - The operation name
   * @param {Object} args - The operation arguments
   * @param {Object} options - Additional options
   * @returns {Promise} The operation result
   * @protected
   */
  async executeSSIOperation(contractName, operation, args, options = {}) {
    const startTime = Date.now();

    try {
      const request = this.createSSIRequest(contractName, operation, args, options);

      // Use sutAdapter.sendRequests (same as OperationBase pattern)
      const result = await this.sutAdapter.sendRequests(request);

      const executionTime = Date.now() - startTime;
      this.logSSIOperation(contractName, operation, args, 'success', executionTime);

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logSSIOperation(contractName, operation, args, 'error', executionTime);

      console.error(`üí• SSI Operation Failed: ${error.message}`);
      console.error(`   Contract: ${contractName}`);
      console.error(`   Operation: ${operation}`);
      console.error(`   Args: ${JSON.stringify(args)}`);
      throw error;
    }
  }
}

// Export constants for use in workload modules
SSIOperationBase.CONTRACTS = SSI_CONTRACTS;
SSIOperationBase.OPERATIONS = SSI_OPERATIONS;

module.exports = SSIOperationBase;

/* ============================================================================
 * ARCHITECTURE BENEFITS & USAGE PATTERNS
 * ============================================================================
 * 
 * This SSI-specific implementation provides several key advantages:
 *
 * 1. **Direct WorkloadModuleBase Extension**
 *    - No inheritance complexity from OperationBase
 *    - Full control over SSI-specific functionality
 *    - Cleaner architecture for complex smart contract interactions
 *
 * 2. **SSI-Optimized Design**
 *    - Built-in support for multiple contracts (RoleControl, DidRegistry, CredentialRegistry)
 *    - Cross-contract gas optimization with safety margins
 *    - SSI-specific error handling and logging
 *    - Direct 1:1 worker-to-account mapping for nonce management
 *
 * 3. **Inspired Patterns from OperationBase**
 *    - Similar initialization flow and validation patterns
 *    - Consistent error handling approach
 *    - Account management inspired by the original template
 *    - Gas configuration pattern adapted for SSI complexity
 *
 * 4. **Enhanced for SSI Workflows**
 *    - Support for read/write operation distinction
 *    - Contract-specific gas limits with automatic safety margins
 *    - Comprehensive logging for SSI operation tracking
 *    - Built-in validation for SSI contract interactions
 *
 * Usage Example:
 * ```javascript
 * class CreateDID extends SSIOperationBase {
 *   createSSIState() {
 *     return new SSIStateManager(this.workerIndex, 'DID', this.ssiConfig);
 *   }
 *
 *   async submitTransaction() {
 *     const didArgs = this.ssiState.getDIDCreationArguments();
 *     await this.executeSSIOperation('DidRegistry', 'createDid', didArgs);
 *   }
 * }
 * ```
 * ============================================================================
 */