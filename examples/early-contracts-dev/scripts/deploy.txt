async function main() {
  // Get the deployer's signer
  const [deployer] = await ethers.getSigners();
  console.log("Deploying contracts with:", deployer.address);

  // Use the provider from the deployer's signer
  const provider = deployer.provider;

  // 1. Deploy DIDRegistry Contract
  const DIDRegistry = await ethers.getContractFactory("DIDRegistry");
  const didRegistry = await DIDRegistry.deploy();
  await didRegistry.waitForDeployment();
  const didRegistryAddress = didRegistry.target;

  // Verify deployment by checking for contract code at the address
  const didRegistryCode = await provider.getCode(didRegistryAddress);
  if (didRegistryCode === "0x") {
    console.error("Error: DIDRegistry contract was not deployed correctly.");
    process.exit(1);
  } else {
    console.log("DIDRegistry deployed successfully at:", didRegistryAddress);
  }

  // 2. Deploy VCRegistry Contract, passing the DIDRegistry address in its constructor
  const VCRegistry = await ethers.getContractFactory("CredentialRegistry");
  const vcRegistry = await VCRegistry.deploy(didRegistryAddress);
  await vcRegistry.waitForDeployment();
  const vcRegistryAddress = vcRegistry.target;

  // Verify deployment by checking for contract code at the address
  const vcRegistryCode = await provider.getCode(vcRegistryAddress);
  if (vcRegistryCode === "0x") {
    console.error("Error: VCRegistry contract was not deployed correctly.");
    process.exit(1);
  } else {
    console.log("VCRegistry deployed successfully at:", vcRegistryAddress);
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("Deployment failed:", error);
    process.exit(1);
  });
